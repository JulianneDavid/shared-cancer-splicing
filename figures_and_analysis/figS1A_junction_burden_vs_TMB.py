#!/usr/bin/env python3

"""
figS1A_junction_burden_vs_TMB.py

"""

import argparse
from datetime import datetime
import glob
import os
import pandas as pd
import sys
try:
    from utilities.utilities import _TCGA_ABBR, _CANCER_COLORS
except ModuleNotFoundError:
    sys.path.append(
        os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    )
    from utilities.utilities import _TCGA_ABBR, _CANCER_COLORS
from utilities.utilities import simple_scatter_with_regression


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Calculates and plots junction burden vs. TMB for each '
                    'TCGA patient.'
    )
    parser.add_argument(
        '--non-gtex-junction-directory', '-j',
        help='Directory containing files generated by jx_indexer.py query: '
             'should contain neojx (not in gtex) counts per sample for one '
             'TCGA cancer type per file.'
    )
    parser.add_argument(
        '--output-path', '-o', default='./',
        help='Give path for figure output directory for junction burden vs. '
             'TMB scatterplot.'
    )
    parser.add_argument(
        '--sample-id-file', '-s',
        help='Provide the samples_ids.tsv file from recount2 that maps sample '
             'accession numbers to recount sample ids.'
    )
    parser.add_argument(
        '--tcga-phenotype-file', '-p',
        help='Provide the TCGA.tsv file from recount2 that lists TCGA sample '
             'ids and phenotype information.'
    )
    parser.add_argument(
        '--calculated-tmb-file', '-t',
        help='Provide the mutation-load_updated.txt file from '
             'doi: 10.1016/j.cell.2018.03.022 (see readme).'
    )

    args = parser.parse_args()
    jx_dir = args.non_gtex_junction_directory
    out_path = args.output_path
    id_file = args.sample_id_file
    cancer_phen = args.tcga_phenotype_file
    tmb_file = args.calculated_tmb_file

    now = datetime.now().strftime('%m-%d-%Y_%H.%M.%S')

    sample_ids = pd.read_table(
        id_file, header=None, usecols=[0, 2],
        names=['recount_id', 'universal_id'],
    )
    sample_ids = sample_ids.set_index('recount_id')['universal_id']

    uppercase_fixer = {'gdc_file_id': lambda ident: ident.upper()}
    tcga_phen = pd.read_table(
        cancer_phen,
        usecols=['gdc_file_id', 'project', 'gdc_cases.project.name',
                 'mapped_read_count', 'gdc_cases.diagnoses.tumor_stage',
                 'gdc_cases.submitter_id'],
        converters=uppercase_fixer,
        dtype={'project': str, 'mapped_read_count': str,
               'gdc_cases.project.name': str, 'gdc_cases.submitter_id': str,
               'gdc_cases.diagnoses.tumor_stage': str}
    )
    new_names = {
        'gdc_file_id': 'universal_id', 'project': 'tcga',
        'gdc_cases.project.name': 'sample_type',
        'gdc_cases.diagnoses.tumor_stage': 'tumor_stage',
        'gdc_cases.submitter_id': 'tcga_id'
    }
    tcga_phen.rename(new_names, axis='columns', inplace=True)
    tcga_phen = tcga_phen[tcga_phen.tcga == 'TCGA']
    tcga_phen['mapped_read_count'] = tcga_phen['mapped_read_count'].astype(int)
    tcga_phen['mapped_read_count'] = tcga_phen['mapped_read_count'] / 10000
    id_index = tcga_phen.set_index('universal_id')['sample_type']
    readcount_index = tcga_phen.set_index('universal_id')['mapped_read_count']
    id_decoder = sample_ids.map(id_index).dropna().to_dict()
    readcount_decoder = sample_ids.map(readcount_index).dropna().to_dict()

    universal_to_tcga = tcga_phen.set_index('universal_id')['tcga_id']
    recount_to_tcga = sample_ids.map(universal_to_tcga)

    tmb_df = pd.read_table(
        tmb_file, usecols=['Patient_ID', 'Silent per Mb', 'Non-silent per Mb'],
        dtype={'Patient_ID': str, 'Silent per Mb': str,
               'Non-silent per Mb': str}
    )
    new_names = {
        'Patient_ID': 'tcga_id', 'Silent per Mb': 'silent',
        'Non-silent per Mb': 'nonsilent'
    }
    tmb_df.rename(new_names, axis='columns', inplace=True)
    tmb_df['silent'] = tmb_df['silent'].astype(float)
    tmb_df['nonsilent'] = tmb_df['nonsilent'].astype(float)
    tmb_df['total'] = tmb_df['silent'] + tmb_df['nonsilent']
    tmb_df = tmb_df.groupby(by=['tcga_id']).mean().reset_index()
    tmb_index = tmb_df.set_index('tcga_id')['total']
    tmb_decoder = recount_to_tcga.map(tmb_index).dropna().to_dict()
    plot_df = pd.DataFrame()
    for i, cancer in enumerate(_TCGA_ABBR, 1):
        abbr = _TCGA_ABBR[cancer]
        jx_glob = os.path.join(
            jx_dir, '{}*neojx_counts_per_*'.format(cancer)
        )
        try:
            jx_file = glob.glob(jx_glob)[0]
        except IndexError:
            print('glob failed')
            print(jx_glob)
            print(glob.glob(jx_glob))
            continue

        curr_df = pd.read_table(jx_file, sep=',').fillna(0)

        curr_df['color'] = 'xkcd:{}'.format(_CANCER_COLORS[abbr])
        curr_df['cancer'] = cancer
        curr_df['y'] = curr_df.apply(
            lambda x: x['neojx_count'] / readcount_decoder[x['recount_id']],
            axis=1
        )
        curr_df['x'] = curr_df.recount_id.apply(lambda x: tmb_decoder.get(x))
        try:
            curr_df = curr_df.drop(['recount_id'], axis=1)
        except KeyError:
            pass
        try:
            curr_df = curr_df.drop(['tcga_id'], axis=1)
        except KeyError:
            pass

        plot_df = pd.concat([plot_df, curr_df])

    fig_name = (
        'figS1A_jxburden_vs_TMB_{}.pdf'.format(now)
    )
    ylim = (0.01, 10.1)
    xlim = (0.01, 1010)
    xlabel = 'tumor mutational burden'
    ylabel = 'junction burden'
    plot_df.dropna(axis=0, inplace=True)
    simple_scatter_with_regression(
        plot_df, out_path, fig_name, xlabel, ylabel, logplot=True, xlim=xlim,
        ylim=ylim
    )
